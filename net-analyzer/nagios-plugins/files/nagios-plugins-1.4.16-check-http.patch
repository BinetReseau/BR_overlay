--- nagios-plugins-1.4.16.orig/plugins/check_http.c	2012-06-27 19:32:47.000000000 +0200
+++ nagios-plugins-1.4.16/plugins/check_http.c	2012-08-04 03:09:32.000000000 +0200
@@ -123,6 +123,8 @@
 char *http_method;
 char *http_post_data;
 char *http_content_type;
+char *proxy_host;
+int proxy_port=8080;
 char buffer[MAX_INPUT_BUFFER];
 
 int process_arguments (int, char **);
@@ -212,6 +214,8 @@
     {"no-body", no_argument, 0, 'N'},
     {"max-age", required_argument, 0, 'M'},
     {"content-type", required_argument, 0, 'T'},
+    {"proxy", required_argument, 0, 'x'},
+    {"proxy-port", required_argument, 0, 'y'},
     {"pagesize", required_argument, 0, 'm'},
     {"invert-regex", no_argument, NULL, INVERT_REGEX},
     {"use-ipv4", no_argument, 0, '4'},
@@ -236,7 +240,7 @@
   }
 
   while (1) {
-    c = getopt_long (argc, argv, "Vvh46t:c:w:A:k:H:P:j:T:I:a:b:e:p:s:R:r:u:f:C:nlLS::m:M:N", longopts, &option);
+    c = getopt_long (argc, argv, "Vvh46t:c:w:A:k:H:P:j:T:I:a:b:e:p:s:R:r:u:f:C:nlLS::m:M:Nx:y:", longopts, &option);
     if (c == -1 || c == EOF)
       break;
 
@@ -321,6 +325,14 @@
     case SNI_OPTION:
       use_sni = TRUE;
       break;
+    case 'x': /* Use proxy */
+      proxy_host=optarg;
+      break;
+    case 'y': /* Proxy port */
+      proxy_port=atoi(optarg);
+      if (proxy_port==0)
+        usage2(_("check_http: invalid proxy port number\n"), optarg);
+      break;
     case 'f': /* onredirect */
       if (!strcmp (optarg, "stickyport"))
         onredirect = STATE_DEPENDENT, followsticky = STICKY_HOST|STICKY_PORT;
@@ -814,28 +826,40 @@
   int page_len = 0;
   int result = STATE_OK;
 
-  /* try to connect to the host at the given port number */
-  if (my_tcp_connect (server_address, server_port, &sd) != STATE_OK)
-    die (STATE_CRITICAL, _("HTTP CRITICAL - Unable to open TCP socket\n"));
 #ifdef HAVE_SSL
+  /* try to connect to the host at the given port number */
   if (use_ssl == TRUE) {
-    result = np_net_ssl_init_with_hostname_and_version(sd, (use_sni ? host_name : NULL), ssl_version);
-    if (result != STATE_OK)
-      return result;
-    if (check_cert == TRUE) {
-      result = np_net_ssl_check_cert(days_till_exp_warn, days_till_exp_crit);
-      np_net_ssl_cleanup();
-      if (sd) close(sd);
-      return result;
+    if ((proxy_host && proxy_connect()) || my_tcp_connect (server_address, server_port, &sd) == STATE_OK) {
+      result = np_net_ssl_init_with_hostname_and_version(sd, (use_sni ? host_name : NULL), ssl_version);
+      if (result != STATE_OK)
+        return result;
+      if (check_cert == TRUE) {
+        result = np_net_ssl_check_cert(days_till_exp_warn, days_till_exp_crit);
+        np_net_ssl_cleanup();
+        if (sd) close(sd);
+        return result;
+      }
+    } else {
+      die (STATE_CRITICAL, _("HTTP CRITICAL - Unable to open TCP socket\n"));
     }
+  } else {
+    if (proxy_host && my_tcp_connect (proxy_host, proxy_port, &sd) != STATE_OK)
+      die (STATE_CRITICAL, _("Unable to open TCP socket to proxy\n"));
+    else if (my_tcp_connect (server_address, server_port, &sd) != STATE_OK)
+      die (STATE_CRITICAL, _("HTTP CRITICAL - Unable to open TCP socket\n"));
   }
-#endif /* HAVE_SSL */
-
-  asprintf (&buf, "%s %s %s\r\n%s\r\n", http_method, server_url, host_name ? "HTTP/1.1" : "HTTP/1.0", user_agent);
-
-  /* tell HTTP/1.1 servers not to keep the connection alive */
-  asprintf (&buf, "%sConnection: close\r\n", buf);
+#else
+  /* try to connect to the host at the given port number */
+  if (proxy_host && my_tcp_connect (proxy_host, proxy_port, &sd) != STATE_OK)
+    die (STATE_CRITICAL, _("Unable to open TCP socket to proxy\n"));
+  else if (my_tcp_connect (server_address, server_port, &sd) != STATE_OK)
+    die (STATE_CRITICAL, _("HTTP CRITICAL - Unable to open TCP socket\n"));
+#endif
 
+  if (proxy_host)
+    asprintf (&buf, "%s %s HTTP/1.0\r\n%s\r\n", http_method, server_url, user_agent);
+  else
+    asprintf (&buf, "%s %s %s\r\n%s\r\n", http_method, server_url, host_name ? "HTTP/1.1" : "HTTP/1.0", user_agent);
   /* optionally send the host header info */
   if (host_name) {
     /*
@@ -1120,6 +1144,52 @@
   return STATE_UNKNOWN;
 }
 
+int proxy_connect()
+{
+  char *buf1;
+  char *buf2;
+  int n,i;
+
+  if (my_tcp_connect(proxy_host, proxy_port, &sd)!=STATE_OK)
+    return FALSE;
+
+  asprintf (&buf1, "CONNECT %s:%d HTTP/1.0\r\n%s\r\n\r\n", server_address, server_port, user_agent);
+
+  if (verbose)
+    printf("PROXY CONNECT: %s",buf1);
+
+  send(sd,buf1,strlen(buf1),0);
+
+  use_ssl=FALSE; /* hack */
+
+  /* fetch the page */
+  buf1 = strdup("");
+  while ((i = my_recv (buffer, MAX_INPUT_BUFFER-1)) > 0) {
+    if (verbose)
+      printf("PROXY CONNECT: %s",buffer);
+    buffer[i] = '\0';
+    asprintf (&buf2, "%s%s", buf1, buffer);
+    free (buf1);
+    buf1 = buf2;
+
+    n=strlen(buf1);
+
+    if (strcmp(buf1+n-4,"\r\n\r\n")==0)
+      break;
+    }
+
+  if (verbose)
+    printf("PROXY CONNECT: %s",buf1);
+
+  if (!(strncmp(buf1,"HTTP/1.",7)==0 & strncmp(buf1+8," 200 ",5)==0))
+    return FALSE;
+
+  use_ssl=TRUE;
+  return 1;
+}
+
+
+
 
 
 /* per RFC 2396 */
@@ -1342,6 +1412,13 @@
   printf (" %s\n", "-p, --port=INTEGER");
   printf ("    %s", _("Port number (default: "));
   printf ("%d)\n", HTTP_PORT);
+  printf (" %s\n", "-x, --proxy-host=ADDRESS");
+  printf ("    %s\n", _("Host name or IP address of HTTP proxy to be used"));
+  printf (" %s\n", "-p, --port=INTEGER");
+  printf ("    %s\n", _("Port number of the HTTP proxy service"));
+
+
+
 
   printf (UT_IPv46);
 
@@ -1465,5 +1542,5 @@
   printf ("       [-e <expect>] [-s string] [-l] [-r <regex> | -R <case-insensitive regex>]\n");
   printf ("       [-P string] [-m <min_pg_size>:<max_pg_size>] [-4|-6] [-N] [-M <age>]\n");
   printf ("       [-A string] [-k string] [-S <version>] [--sni] [-C <warn_age>[,<crit_age>]]\n");
-  printf ("       [-T <content-type>] [-j method]\n");
+  printf ("       [-T <content-type>] [-j method] [-x proxy-host] [-y proxy-port]\n");
 }
